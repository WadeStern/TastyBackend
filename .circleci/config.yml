version: 2.1
orbs:
  python: circleci/python@2
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  test-python:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - python/install-packages
      - python/install-packages:
          args: pytest
          pkg-manager: pip
          pypi-cache: false
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint Python code
          command: |
            pip install flake8
            flake8 .
          when: always

  build_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker image
          command: |
            export TAG=0.2.<< pipeline.number >>
            export IMAGE_NAME=tastybackend           
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME
  
  create_kubernetes_cluster:
    docker:
      - image: dudesm00thie/wadeazcli
        user: root
    steps:
      - checkout
      - run:
          name: Login to Azure
          command: |
            az login --service-principal --username "${AZURE_CLIENT_ID}" --password "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"  
      - run:
          name: Configure SSH Key
          command: |
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
            chmod 600 ~/.ssh/id_rsa.pub
      - run:
          name: Create Kubernetes Cluster
          command: |
            az aks create -g buypotatoResourceGroup -n buypotatoStaging --node-count 1 --ssh-key-value ~/.ssh/id_rsa.pub
            az aks get-credentials --resource-group buypotatoResourceGroup --name buypotatoStaging
      - persist_to_workspace:
          root: /root
          paths:
            - .kube/config

  setup_dns:
    docker:
      - image: dudesm00thie/kubeaz:latest
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Set Vars
          command: | 
            PRINCIPAL_ID=$(az aks show --resource-group buypotatoResourceGroup --name buypotatoStaging \
            --query "identityProfile.kubeletidentity.objectId" --output tsv)
            AZURE_DNS_ZONE="staging.wadestern.com" 
            AZURE_DNS_ZONE_RESOURCE_GROUP="buypotatoResourceGroup"
            DNS_ID=$(az network dns zone show --name $AZURE_DNS_ZONE \
            --resource-group $AZURE_DNS_ZONE_RESOURCE_GROUP --query "id" --output tsv)
            echo $PRINCIPAL_ID
            echo $AZURE_DNS_ZONE
            echo $AZURE_DNS_ZONE_RESOURCE_GROUP
            echo $DNS_ID
      - run:
          name: Make azure.json
          command: |
            cat <<-'EOF' > ./azure.json
            {
              "tenantId": "$(az account show --query tenantId -o tsv)",
              "subscriptionId": "$(az account show --query id -o tsv)",
              "resourceGroup": "$AZURE_DNS_ZONE_RESOURCE_GROUP",
              "useManagedIdentityExtension": true
            }
            EOF
            more ./azure.json
      - run:
          name: Create kubernetes secret and namespace
          command: |
            kubectl --kubeconfig=/root/.kube/config create secret generic azure-config-file --namespace "default" --from-file ./azure.json
            kubectl --kubeconfig=/root/.kube/config create --namespace "default" --filename /root/project/deploy/azure-external-dns.yaml
      - run:
          name: Deploy backend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-backend-deploy.yaml
      - run:
          name: Deploy frontend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-frontend-deploy.yaml

  deploy_to_kubernetes:
    docker:
      - image: dudesm00thie/kubeaz:latest
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: List files
          command: | 
            find /root
      - run:
          name: Deploy backend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-backend-deploy.yaml
      - run:
          name: Deploy frontend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-frontend-deploy.yaml
    
  Run_staging_test:
    docker:
      - image: python:3.10
        user: root
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            find /root
            pip install -r /root/project/stagingtest/requirements.txt
      - run:
          name: Run Staging Tests
          command: python /root/project/stagingtest/test_staging.py

workflows:
  build-and-test:
    jobs:
      #- test-python
      #- build_docker_image
      - create_kubernetes_cluster
      - setup_dns:
          requires:
            - create_kubernetes_cluster
      - deploy_to_kubernetes:
          requires:
            - setup_dns
      #- Run_staging_test:
      #    requires:
      #      - deploy_to_kubernetes
