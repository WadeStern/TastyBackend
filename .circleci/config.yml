version: 2.1
orbs:
  python: circleci/python@2
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  test-python:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - python/install-packages
      - python/install-packages:
          args: pytest
          pkg-manager: pip
          pypi-cache: false
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint Python code
          command: |
            pip install flake8
            flake8 .
          when: always

  build_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker image
          command: |
            export TAG=0.2.<< pipeline.number >>
            export IMAGE_NAME=tastybackend           
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME
  
  create_kubernetes_cluster:
    docker:
      - image: dudesm00thie/wadeazcli
        user: root
    steps:
      - checkout
      - run:
          name: Login to Azure
          command: |
            az login --service-principal --username "${AZURE_CLIENT_ID}" --password "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"  
      - run:
          name: Configure SSH Key
          command: |
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
            chmod 600 ~/.ssh/id_rsa.pub
      - run:
          name: Create Kubernetes Cluster
          command: |
            az aks create -g buypotatoResourceGroup -n buypotatoStaging --node-count 1 --ssh-key-value ~/.ssh/id_rsa.pub
            az aks get-credentials --resource-group buypotatoResourceGroup --name buypotatoStaging
      - persist_to_workspace:
          root: /root
          paths:
            - .kube/config
  deploy_to_kubernetes:
    docker:
      - image: dudesm00thie/kubeaz:latest
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: List files
          command: | 
            find /root
      - run:
          name: Deploy backend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-backend-deploy.yaml
      - run:
          name: Deploy frontend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-frontend-deploy.yaml
      - run:
          name: Find backend ip
          command: |
            timeout 300 bash -c 'until svc_ip=$(kubectl --kubeconfig=/root/.kube/config get svc buypotato-backend -o jsonpath="{.status.loadBalancer.ingress[*].ip}"); [ ! -z "$svc_ip" ]; do sleep 5; done; echo $svc_ip'
          environment:
            SERVICE_NAME: backend-service
          no_output_timeout: 600
    
  Run_staging_test:
    docker:
      - image: python:3.10
        user: root
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            find /root
            pip install -r /root/project/stagingtest/requirements.txt
      - run:
          name: Run Staging Tests
          command: python /root/project/stagingtest/test_staging.py

workflows:
  build-and-test:
    jobs:
      #- test-python
      #- build_docker_image
      - create_kubernetes_cluster
      #- deploy_to_kubernetes:
      #    requires:
      #      - create_kubernetes_cluster
      #- Run_staging_test:
      #    requires:
      #      - deploy_to_kubernetes
