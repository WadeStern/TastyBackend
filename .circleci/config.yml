version: 2.1
orbs:
  python: circleci/python@2
  kubernetes: circleci/kubernetes@1.3.1
  azure-cli: circleci/azure-cli@1.2.2
jobs:
  test-python:
    # Install dependencies and run tests
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - python/install-packages
      - python/install-packages:
          args: pytest
          pkg-manager: pip
          pypi-cache: false
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint Python code
          command: |
            pip install flake8
            flake8 .
          when: always  # Run even if previous steps fail

  build_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker image
          command: |
            export TAG=0.2.<< pipeline.number >>
            export IMAGE_NAME=tastybackend           
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME

  create_kubernetes_cluster:
    executor: azure-cli/default
    steps:
      - checkout
      - run:
          name: Install Azure CLI
          command: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      - run:
          name: Login to Azure
          command: |
            az login --service-principal --username "${AZURE_CLIENT_ID}" --password "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"  
      - run:
          name: Create Kubernetes Cluster
          command: |
            az aks create --resource-group buypotatoResourceGroup --name buypotatoStaging --node-count 3 --generate-ssh-keys --subscription "${AZURE_SUBSCRIPTION_ID}"
      - persist_to_workspace:
          root: .
          paths: .kube
workflows:
  build-and-test:
    jobs:
      - create_kubernetes_cluster