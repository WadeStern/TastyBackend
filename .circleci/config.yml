version: 2.1
orbs:
  python: circleci/python@2
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  test-python:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - python/install-packages
      - python/install-packages:
          args: pytest
          pkg-manager: pip
          pypi-cache: false
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint Python code
          command: |
            pip install flake8
            flake8 .
          when: always

  build_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker image
          command: |
            export TAG=0.2.<< pipeline.number >>
            export IMAGE_NAME=tastybackend           
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME
  
  create_kubernetes_cluster:
    docker:
      - image: dudesm00thie/wadeazcli
        user: root
    steps:
      - checkout
      - run:
          name: Login to Azure
          command: |
            az login --service-principal --username "${AZURE_CLIENT_ID}" --password "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"  
      - run:
          name: Configure SSH Key
          command: |
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
            chmod 600 ~/.ssh/id_rsa.pub
      - run:
          name: Create Kubernetes Cluster
          command: |
            az aks create -g buypotatoResourceGroup -n buypotatoStaging --node-count 2 --ssh-key-value ~/.ssh/id_rsa.pub
            az aks get-credentials --resource-group buypotatoResourceGroup --name buypotatoStaging
      - persist_to_workspace:
          root: /root
          paths:
            - .kube/config

  setup_dns_and_deploy:
    docker:
      - image: dudesm00thie/kubeaz:latest
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Login to Azure
          command: |
            az login --service-principal --username "${AZURE_CLIENT_ID}" --password "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"
      - run:
          name: Set Vars
          command: | 
            PRINCIPAL_ID=$(az aks show --resource-group buypotatoResourceGroup --name buypotatoStaging \
            --query "identityProfile.kubeletidentity.objectId" --output tsv)
            AZURE_DNS_ZONE="staging.wadestern.com" 
            AZURE_DNS_ZONE_RESOURCE_GROUP="buypotatoResourceGroup"
            DNS_ID=/subscriptions/a24f845d-8972-45b6-ab3d-9dd9e598dbeb/resourceGroups/buypotatoresourcegroup/providers/Microsoft.Network/dnszones/staging.wadestern.com
            echo $PRINCIPAL_ID
            echo $AZURE_DNS_ZONE
            echo $AZURE_DNS_ZONE_RESOURCE_GROUP
            echo $DNS_ID
            az role assignment create --role "DNS Zone Contributor" --assignee "${PRINCIPAL_ID}" --scope "${DNS_ID}"
      - run:
          name: Create kubernetes secret and namespace
          command: |
            kubectl --kubeconfig=/root/.kube/config create secret generic azure-config-file --namespace "default" --from-file /root/project/deploy/azure.json
            kubectl --kubeconfig=/root/.kube/config create --namespace "default" --filename /root/project/deploy/azure-external-dns.yaml
      - run:
          name: Wait for external-dns pod to be running
          command: |
            timeout=240  # 4 minutes timeout
            start_time=$(date +%s)
            
            while true; do
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              
              if [ "$elapsed_time" -ge "$timeout" ]; then
                echo "Timeout: External-dns pod didn't start within $timeout seconds."
                exit 1
              fi
              
              pod_status=$(kubectl --kubeconfig=/root/.kube/config get pods -n default -l app=external-dns -o jsonpath='{.items[0].status.phase}')
              
              if [ "$pod_status" = "Running" ]; then
                echo "External-dns pod is now running."
                break
              else
                echo "Waiting for external-dns pod to start..."
                sleep 10  # Adjust the sleep duration as needed
              fi
            done 
      - run:
          name: Deploy backend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-backend-deploy.yaml
      - run:
          name: Deploy frontend to Kubernetes
          command: kubectl --kubeconfig=/root/.kube/config apply -f /root/project/deploy/staging-frontend-deploy.yaml
      - run:
          name: Wait for external-dns pod to be running
          command: |
            timeout=240  # 4 minutes timeout
            start_time=$(date +%s)
            
            while true; do
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              
              if [ "$elapsed_time" -ge "$timeout" ]; then
                echo "Timeout: External-dns pod didn't start within $timeout seconds."
                exit 1
              fi
              
              pod_status=$(kubectl --kubeconfig=/root/.kube/config get pods -n default -l app=external-dns -o jsonpath='{.items[0].status.phase}')
              
              if [ "$pod_status" = "Running" ]; then
                echo "External-dns pod is now running."
                break
              else
                echo "Waiting for external-dns pod to start..."
                sleep 10  # Adjust the sleep duration as needed
              fi
            done
    
  puppeteer_testing:
    working_directory: ~/repo/testing
    docker:
      - image: circleci/node:12-browsers
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: find files
          command: find ~/repo
      - run:
          name: Update NPM
          command: "sudo npm install -g npm@7"
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run the application
          command: node server.js
          background: true
      - run:
          name: Run tests
          command: npm run test


workflows:
  build-and-test:
    jobs:
      #- test-python
      #- build_docker_image
      #    requires:
      #      - test-python
      #- create_kubernetes_cluster
      #    requires:
      #      - build_docker_image
      #- setup_dns_and_deploy:
      #    requires:
      #      - create_kubernetes_cluster
      - puppeteer_testing
      #    requires:
      #      - setup_dns_and_deploy
